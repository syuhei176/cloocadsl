%{
/*
<title>DSL Definition Language</title>
*/
%}
%token STRING NUMBER IDENTIFIER

%left '+' '-'
%left '*' '/'

%%

start:	line;

/*
lines:
        | lines line { $$ = $1 + $2; }
        ;
*/

line	: class ';' { yyprintanswer("Answer = " + $1); }
	| { $$ = "(empty line ignored)<br>"; }
	| error { $$ = ""; }
	;

class	: class_name ':' expr
	{}
	;

class_name	: STRING ;

expr	: expr '+' expr { $$ = $1 + $3; }
	| expr '-' expr { $$ = $1 - $3; }
	| expr '*' expr { $$ = $1 * $3; }
	| expr '/' expr { $$ = $1 / $3; }
	| '(' expr ')' { $$ = $2; }
	| NUMBER { $$ = $1; }
	;

%%

/* Lexical analyzer */

var buffer;
var token;
var toktype;

TitleMessage = "Calculator";
FormMessage = "Enter integer expression (ex. 2+3*4):";

function isletter(c)
{
  return ('a' <= c && c <= 'z') || ('A' <= c && c <= 'Z');
}

function isdigit(c)
{
  return ('0' <= c && c <= '9');
}

function yylex()
{
  yylval = null;
  while (buffer != ""
         && (buffer.charAt(0) == ' ' || buffer.charAt(0) == '\t')) {
    buffer = buffer.substr(1);
  }
  if (buffer.length == 0)
    return 0;
  if (isletter(buffer.charAt(0))) {
    var i;
    for (i = 0; i < buffer.length; i++) {
      if (!isletter(buffer.charAt(i)) && !isdigit(buffer.charAt(i)))
        break;
    }
    token = buffer.substr(0, i);
    buffer = buffer.substr(i);
    yylval = token;
    return IDENTIFIER;
  } else if (isdigit(buffer.charAt(0))) {
    var i;
    for (i = 0; i < buffer.length; i++) {
      if (!isdigit(buffer.charAt(i)))
        break;
    }
    token = buffer.substr(0, i);
    buffer = buffer.substr(i);
    yylval = token - 0;
    return NUMBER;
  } else {
    token = buffer.substr(0, 1);
    buffer = buffer.substr(1);
    return token.charCodeAt(0);
  }
}

function yyerror(msg) {
  //yyprintln(msg);
  console.log(msg);
}



function compile(b) {
  buffer = b;
  yyparse();
}
